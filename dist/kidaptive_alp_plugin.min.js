KidaptiveAlpPlugin=new springroll.ApplicationPlugin;KidaptiveAlpPlugin.getReleaseStatus=function(e){return e&&e.playOptions&&e.playOptions.release};(function(){"use strict";var e=KidaptiveAlpPlugin;e.preload=function(e){var i=function(e,n){if(e instanceof Function){return e.bind(this)(n)}return e}.bind(this);var t={options:{}};var a=function(e){Object.keys(e).forEach(function(n){if(n==="options"){Object.keys(e[n]).forEach(function(i){t.options[i]=e[n][i]})}else{t[n]=e[n]}})};var o=KidaptiveAlpPlugin.getReleaseStatus(this)?"prod":"dev";var s=true;var r=false;if(this.config.alpEnvs&&this.config.alpEnvs[o]){a(this.config.alpEnvs[o]);s=false}else if(this.config.alp){a(this.config.alp);r=true}if(this.options.alpEnvs&&this.options.alpEnvs[o]){a(this.options.alpEnvs[o]);s=false}else if(this.options.alp){a(this.options.alp);r=true}if(r){console.warn("app.config.alp and app.options.alp are deprecated and may be removed in a future release. Use app.config.alpEnvs and app.options.alpEnvs instead")}if(r&&!s){console.warn("mixed usage of alp and alpEnv detected. alp_config will NOT be fetched from container")}var l=function(n){var t=n.recType;var a=n.recParams;var o=n.recCallback;var s=n.gameUri;var r=n.eventOverride;var l=this.learning.catalog.events||{};var c=KidaptiveSdk.KidaptiveUtils.copyObject(n.options)||{};c.autoFlushCallbacks=c.autoFlushCallbacks||[];c.autoFlushCallbacks.splice(0,0,function(e){e.then(function(){if(!KidaptiveSdk.isAnonymousSession()){KidaptiveSdk.startAnonymousSession()}})});KidaptiveSdk.init(n.apiKey,n.version,c).then(function(e){var c={};this.alpPlugin={sdk:e,getRecommendation:function(n){var r=e.KidaptiveUtils.copyObject(i(t,n)||"optimalDifficulty");var l=e.KidaptiveUtils.copyObject(i(a,n))||{};l.learnerId=e.getLearnerList()[0].id;l.game=s;var c;switch(r){case"random":c=e.getRandomRecommendations(l);break;case"optimalDifficulty":c=e.getOptimalDifficultyRecommendations(l);break;default:c=e.getRecommendations(r,l)}return o?o.bind(this)(c,n):c}.bind(this),getState:function(){return e.KidaptiveUtils.copyObject(c)},setState:function(n){Object.keys(n).forEach(function(e){if(n[e]===undefined){delete c[e]}});n=e.KidaptiveUtils.copyObject(n);Object.keys(n).forEach(function(e){c[e]=n[e]})},getInitParams:function(){return KidaptiveSdk.KidaptiveUtils.copyObject(n,true)}};if(!n.options.noOidc&&this.container){var p=function(n){console.warn("KidaptiveAlpPlugin is handling an openId event while using an offline-only SDK. Using an anonymous, local SDK session.");e.init().then(function(){if(!e.isAnonymousSession()){e.logoutUser();e.startAnonymousSession().then(function(){c={}})}})};this.container.on("openIdAuthSuccess",p);this.container.on("openIdRefreshAuthSuccess",p);this.container.on("openIdAuthFailure",p);this.container.on("openIdRefreshAuthFailure",p);this.container.on("openIdAllLogoutsComplete",p)}if(this.learning){var u=function(n){if(!e.getCurrentUser()){return}var i=l[n.event_data.event_code]||"Springroll Event";var t=e.KidaptiveUtils.copyObject(n.event_data);var a={additionalFields:t};a.gameURI=s;a.learnerId=e.getLearnerList()[0].id;for(var o in t){if(o==="duration"&&typeof t[o]==="number"){a[o]=t[o]/1e3;delete t[o]}else if(t[o]instanceof Object){t[o]=e.KidaptiveUtils.toJson(t[o])}else{t[o]=t[o].toString()}}t.session_id=n.game_session;t.springroll_game_id=n.game_id;t.springroll_event_id=n.event_id;t.springroll_event_code=t.event_code;delete t.event_code;return{eventName:i,args:a}};var d=function(n){var i=u(n);if(i){e.reportBehavior(i.eventName,i.args)}};var f=(r||d).bind(this);this.learning.on("learningEvent",function(e){f(e,d,u)}.bind(this))}if(!e.isAnonymousSession()){return e.startAnonymousSession()}}.bind(this)).then(function(){e()}).catch(function(n){console.error("Kidaptive ALP failed to initialize",n);e()})}.bind(this);if(s){n(this.container,t,l)}else{l(t)}};e.teardown=function(){this.alpPlugin.sdk.destroy().then(function(){delete this.alpPlugin}.bind(this))};var n=function(e,n,i){if(!(e instanceof Bellhop)){i(n)}var t=50;var a=null;var o=setTimeout(function(){if(a!==null){return}a=false;i(n)},t);e.fetch("alp_config",function(e){if(a!==null){return}a=true;i(Object.merge({},n,e.data))},null,true)}})();
